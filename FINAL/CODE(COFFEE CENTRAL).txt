SOURCE CODE:
import tkinter as tk
from tkinter import LEFT
import folium
from tkinter import Canvas
from tkinter.constants import NW
import webbrowser
from folium.features import CustomIcon
from PIL import Image, ImageTk

def create_grid(n, shops):
    grid = {}
   
    for i in range(n):
        x, y = shops[i]
        grid[(x, y)] = 1
    return grid

def get_bestLocation(dx, dy, grid, n):
    max_shops = 0
    for i in range(1, dx+1):
        for j in range(1, dy+1):
            count = 0
            for x, y in grid:
                if abs(x-i) + abs(y-j) <= n:
                    count += 1
            if count > max_shops:
                max_shops = count
                best_location = (i, j)
            elif count == max_shops:
                if best_location[1] > j or (best_location[1] == j and best_location[0] > i):
                    best_location = (i, j)
    return max_shops, best_location

def queries(dx, dy, n, q, shops, m):
    grid = create_grid(n, shops)
    result = []
    for i in range(q):
        n = m[i]
        max_shops, best_location = get_bestLocation(dx, dy, grid, n)
        result.append((max_shops, best_location))
    return result

def validate_input(dx, dy, n, q, shops, m):
    if dx <= 0 or dy <= 0:
        return "Error: City coordinates must be positive integers."
    if n < 1:
        return "Error: Number of coffee shops must be at least 1."
    if q < 1:
        return "Error: Number of queries must be at least 1."
    if len(shops) != n:
        return f"Error: Number of coffee shops should be {n}."
    for i in range(n):
        x, y = shops[i]
        if x <= 0 or y <= 0 or x > dx or y > dy:
            return f"Error: Coffee shop {i+1} coordinates are out of range."
    if len(m) != q:
        return f"Error: Number of query distances should be {q}."
    for i in range(q):
        if m[i] <= 0:
            return f"Error: Query distance {i+1} must be a positive integer."
    return None


def run_queries():
    dx = int(dx_entry.get())
    dy = int(dy_entry.get())
    n = int(n_entry.get())
    q = int(q_entry.get())
    shops = [list(map(int, s.split())) for s in shops_entry.get("1.0", tk.END).split("\n") if s.strip()]
    m = [int(s) for s in m_entry.get("1.0", tk.END).split("\n") if s.strip()]
    error = validate_input(dx, dy, n, q, shops, m)

    if error is not None:
        # display error message
        output_window = tk.Toplevel(root)
        output_window.title("Output")

        output_label = tk.Label(output_window, text="Output:")
        output_label.pack()

        output_text = tk.Text(output_window, height=10, width=30)
        output_text.pack()

        output_text.insert(tk.END, error)

        output_window.lift()
        return
    else:
        results = queries(dx, dy, n, q, shops, m)
        # Create a new output window
        output_window = tk.Toplevel(root)
        output_window.title("Output")

        # Add a label to show the output
        output_label = tk.Label(output_window, text="Output:")
        output_label.pack()

        # Add a text widget to display the output
        output_text = tk.Text(output_window, height=30, width=50)
        output_text.pack()

        # Add the results to the text widget
        for result in results:
            output_text.insert(tk.END, f"{result[0]} ({result[1][0]} , {result[1][1]})\n")
           
        for i, result in enumerate(results):
            output_text.insert(tk.END, f"Query {i+1}: {result[0]} ({result[1][0]} , {result[1][1]})\n")
            output_text.insert(tk.END, f"No of shops in query {i+1}: {result[0]}\n")
            output_text.insert(tk.END, f"The Best location For new Shop in query{i+1}:({result[1][0]},{result[1][1]})\n" )
            output_text.insert(tk.END, "Coffee shops:\n")
            for j, shop in enumerate(shops):
                if abs(shop[0]-result[1][0]) + abs(shop[1]-result[1][1]) <= m[i]:
                    output_text.insert(tk.END, f"Coffee shop {j+1}: ({shop[0]}, {shop[1]})\n")
            output_text.insert(tk.END, "\n")


        # Prompt user for city coordinates
        city_lat = dx
        city_lon = dy

        # Prompt user for coffee shop coordinates
        num_coffee_shops = len(shops)

        coffee_shops = []
        for i in range(num_coffee_shops):
            shop_lat = shops[i][0]
            shop_lon = shops[i][1]
            shop_name = f"Coffee Shop {i+1}"
            coffee_shops.append({"name": shop_name, "lat": shop_lat, "lon": shop_lon})

        # Create map centered on city coordinates
        m = folium.Map(location=[city_lat, city_lon], zoom_start=12)
        # define path to custom icon image
        icon_image = "C:\\Users\\varsh\\Downloads\\WISE PROJECT\\shop.ico"

        # loop over shops and add markers with custom icon
        for shop in shops:
            distance = abs(shop[0] - dx) + abs(shop[1] - dy)
            icon = CustomIcon(icon_image, icon_size=(100, 100))
            folium.Marker(location=[shop[0], shop[1]], tooltip=f"Shop at:({shop[0]},{shop[1]})", icon=icon).add_to(m)


        # Add a marker for the best location

        colors = ['green', 'purple', 'orange', 'darkred','cadet blue','light blue','thistle2','NavajoWhite2','Lavender','Plum1','rosy brown'] # add more colors as needed

        for i, result in enumerate(results):
            best_location = result[1]
            color = colors[i % len(colors)] # loop through colors based on index

            folium.Marker(location=[best_location[0], best_location[1]],
                  tooltip=folium.Tooltip(f"Best Location of query {i+1}: ({best_location[0]}, {best_location[1]})",permanent=True),
                  icon=folium.Icon(color=color),
                  max_width=300).add_to(m)



        # Save the map to a file and open it in a new tab in the web browser
        # Save the map as an HTML file
        m.save("coffee_shops_map.html")

        # Open the HTML file in a new browser window
        webbrowser.open_new_tab("coffee_shops_map.html")

        # Bring the new window to the front
        output_window.lift()

# Prompt user for city coordinates
root = tk.Tk()
root.title("COFFEE CENTRAL")
root.geometry("1400x700")

bg_image = ImageTk.PhotoImage(Image.open("C:\\Users\\varsh\\Downloads\\WISE PROJECT\\finalbg.png"))
# Create a label to hold the background image
bg_label = tk.Label(root, image=bg_image)
bg_label.place(x=0, y=0, relwidth=1, relheight=1)

take_label = tk.Label(root, text="Enter city x coordinate:", font=("Cascadia Code ExtraLight", 13),bg="Linen",fg="Linen",anchor="w")
take_entry = tk.Entry(root, font=("Courier New", 15), bg="Linen", fg="Linen", width=20)
take_label.grid(row=2, column=6, padx=20, pady=20)
take_entry.grid(row=1, column=6, padx=20, pady=20)

dx_label = tk.Label(root, text="Enter city  x coordinate:", font=("Cascadia Code ExtraLight", 13),bg="sienna4",fg="white",anchor="w")
dx_entry = tk.Entry(root, font=("Courier New", 15),bg="white",fg="black", width=20, borderwidth=3)
dx_label.grid(row=5, column=9, padx=15, pady=15)
dx_entry.grid(row=5, column=10, padx=5, pady=5)

dy_label = tk.Label(root, text="Enter city  y coordinate:", font=("Cascadia Code ExtraLight", 13),bg="sienna4",fg="white",anchor="w")
dy_entry = tk.Entry(root, font=("Courier New", 15),bg="white",fg="black", width=20, borderwidth=3)
dy_label.grid(row=10, column=9, padx=15, pady=15)
dy_entry.grid(row=10, column=10, padx=5, pady=5)


n_label = tk.Label(root, text="Enter number of coffee shops:", font=("Cascadia Code ExtraLight", 13),bg="sienna4",fg="white",anchor="e")
n_entry = tk.Entry(root, font=("Courier New", 15),bg="white",fg="black", width=20, borderwidth=3)
n_label.grid(row=15, column=9, padx=25, pady=25)
n_entry.grid(row=15, column=10, padx=5, pady=5)

q_label = tk.Label(root, text="Enter number of queries:", font=("Cascadia Code ExtraLight", 13),bg="sienna4",fg="white",anchor="e")
q_entry = tk.Entry(root, font=("Courier New", 15),bg="white",fg="black", borderwidth=3)
q_label.grid(row=17, column=9, padx=25, pady=25)
q_entry.grid(row=17, column=10, padx=5, pady=5)
   
shops_label = tk.Label(root, text="Enter locations of coffee \nshops (x y):", font=("Cascadia Code ExtraLight", 13),bg="sienna4",fg="white")
shops_entry = tk.Text(root, height=3, width=20, font=("Courier New", 15),bg="white",fg="black", borderwidth=3)
shops_label.grid(row=20, column=9, padx=15, pady=15, sticky="S")
shops_entry.grid(row=20, column=10, padx=5, pady=5, sticky="N")

m_label = tk.Label(root, text="Enter query distances:", font=("Cascadia Code ExtraLight", 13),bg="sienna4",fg="white")
m_entry = tk.Text(root, height=3, width=20, font=("Courier New", 15),bg="white",fg="black", borderwidth=3)
m_label.grid(row=40, column=9, padx=25, pady=25)
m_entry.grid(row=40, column=10, padx=25, pady=25)
 
# Load the image
submit_img = Image.open("C:\\Users\\varsh\\Downloads\\WISE PROJECT\\submit.ico")
submit_img = submit_img.resize((120, 40))  # Resize the image if needed
photo_img = ImageTk.PhotoImage(submit_img)

# Create the button with image
submit_button = tk.Button(root, image=photo_img, compound=LEFT, command=run_queries, width=120, height=40,bg="antique white")
submit_button.grid(row=70, column=10, columnspan=2, padx=5, pady=5)


root.mainloop()
